#load "preload.jai";

main :: () {

    // a := int.[1,2,3,6,7,9,10,11];
    // for i:0..11 
    //     print("searching for %: % ----------------------\n", 
    //         i, array_find_sorted(a, i));

    // b : [..]int;
    // array_add(*b, 1,2,3,6,7,9,10,11);
    // print("b = %\n", b);
    // print("insert %: %\n", 7, array_insert_sorted(*b, 7, true));
    // print("b = %\n", b);
    // print("insert %: %\n", 7, array_insert_sorted(*b, 7));
    // print("b = %\n", b);
    // print("insert %: %\n", 4, array_insert_sorted(*b, 4));
    // print("b = %\n", b);
    // print("insert %: %\n", 0, array_insert_sorted(*b, 0));
    // print("b = %\n", b);
    // print("insert %: %\n", 42, array_insert_sorted(*b, 42));
    // print("b = %\n", b);

    part_1(check, true);
}


Tile :: enum u8 {
    SAND;
    WALL;
    AIR;
}

Column :: struct {
    y_pos : [..]int;
    tiles : [..]Tile;
}
get :: (c: Column, y: int) -> Tile {
    i := array_find_sorted(c.y_pos, y);
    return ifx i == -1 then .AIR else c.tiles[i];
}
set :: (c: *Column, y: int, tile: Tile) -> int {
    DEBUG :: false;
    #if DEBUG print("set: Column %, y %, tile %\n", <<c, y, tile);
    i, new_entry := array_insert_sorted(*c.y_pos, y, true);
    #if DEBUG print("    i %, new_entry %\n", i, new_entry);
    if new_entry then array_insert_at(*c.tiles, tile, i);
    #if DEBUG print("column after adding tile: %\n", <<c);
    return i;
}
find_next_floor :: (c: Column, from_y: int) -> int {
    i := array_find_sorted(c.y_pos, from_y, .NEXT);
    if i >= c.y_pos.count-1 then return -1; // no floor
    return i;
}

Map :: struct {
    column_postions : [..]int;
    columns : [..]Column;
}
column_index_of :: (m: Map, x: int) -> int {
    for m.column_postions if it == x then return it_index;
    return -1;
}
index_of :: (m: Map, x: int, y: int) -> int, int {
    ci := column_index_of(m, x);
    if ci == -1 return -1, -1;
    c := m.columns[ci];

    // binary search in sorted column array
    return ci, array_find_sorted(c.y_pos, y);
}
get :: (m: Map, x: int, y: int) -> Tile {
    c, i := index_of(m, x, y);
    return ifx i == -1 then .AIR else m.columns[c].tiles[i];
}
set :: (m: *Map, x: int, y: int, tile: Tile) -> int, int {
    DEBUG :: false;
    #if DEBUG print("set: Map %, x %, y %, tile %\n", <<m, x, y, tile);
    ci := column_index_of(m, x);
    if ci == -1 {
        #if DEBUG print("creating new Column\n");
        c : Column;
        ci = m.columns.count;
        array_add(*m.column_postions, x);
        array_add(*m.columns, c);
    }

    ri := set(*m.columns[ci], y, tile);

    return ci, ri;
}


simulate :: (m: *Map, x: int, y: int, $floor:=false, max_y:=0) -> escape_or_pile: bool {
    DEBUG :: false;
    #if DEBUG print("floor = %\n", floor);

    // sand piled up to inlet
    if get(m, x, y) != .AIR then return true;

    px := x;
    py := y;

    // #if floor {
    //     max_y := 0;
    //     for m.columns if it.y_pos[it.y_pos.count-1] > max_y then
    //         max_y = it.y_pos[it.y_pos.count-1];
    //     max_y += 2;
    //     #if DEBUG print("max_y = %\n", max_y);
    // }

    while true {
        if py >= max_y-1 return false;

        ci := column_index_of(m, px);
        #if DEBUG print("column index of x = % is %\n", px, ci);
        if ci == -1 #if !floor {
            return true;
        } else {
            // a new column has to be added and the sand will drop to
            // the bottom
            set(m, px, max_y-1, .SAND);
            return false;
        }
        column := *m.columns[ci];
        #if DEBUG print("column = %\n", <<column);

        iy, found := array_find_sorted(column.y_pos, py+1, .NEXT);
        #if DEBUG print("index of y = % : %, found %\n", py, iy, found);
        if iy == -1 {
            #if !floor return true; // no tile below py
            else { // no tile below py
                if py+1 <= max_y-1 {
                    set(column, max_y-1, .SAND);
                    return false;
                }
                return false;
            }
        }
        y_bottom := column.y_pos[iy];
        #if DEBUG print("y_bottom = %\n", y_bottom);

        py = y_bottom-1; // one tile up
        left  := get(m, px-1, py+1);
        right := get(m, px+1, py+1);
        if left != .AIR && right != .AIR {  // cannot slide to either side
            set(column, py, .SAND);
            return false;
        } else if left == .AIR {  // first slide left
            px -= 1;
        } else {  // then slide right
            px += 1;
        }
    }

    assert(false, "unreachable");
    return true;
}

make_wall_horizontal :: (m: *Map, y: int, from_x: int, to_x: int) {
    fx, tx : int = ---;
    if from_x < to_x {fx = from_x; tx = to_x;}
    else             {fx = to_x; tx = from_x;}
    for x: fx..tx set(m, x, y, .WALL);
}
make_wall_vertical :: (m: *Map, x: int, from_y: int, to_y: int) {
    // print("make_wall_vertical\n");
    fy, ty : int = ---;
    if from_y < to_y {fy = from_y; ty = to_y;}
    else             {fy = to_y; ty = from_y;}
    for y: fy..ty set(m, x, y, .WALL);
}
str :: (m: Map) -> string {

    min_x : int = cast(int)S64_MAX;
    max_x : int = cast(int)S64_MIN;
    min_y : int = 0;
    max_y : int = cast(int)S64_MIN;

    for m.column_postions {
        if it < min_x then min_x = it;
        if it > max_x then max_x = it;
    }

    for m.columns {
        // if it.y_pos[0] < min_y then min_y = it.y_pos[0];
        if it.y_pos.count == 0 continue;
        if it.y_pos[it.y_pos.count-1] > max_y then max_y = it.y_pos[it.y_pos.count-1];
    }

    // print("S32_MIN = %\n", cast(int)S64_MIN);
    // print("Map bounds (%,%) -> (%,%)\n", min_x, min_y, max_x, max_y);

    builder : String_Builder;

    for y: min_y..max_y {
        for x: min_x..max_x {

            // print("printing (%,%)\n", x, y);

            if y == 0 && x == 500 {
                append(*builder, "+");
                continue x;
            }

            tile := get(m, x, y);
            if tile == {
                case .SAND; append(*builder, "o");
                case .WALL; append(*builder, "#");
                case .AIR;  append(*builder, ".");
            }
        }

        append(*builder, "\n");
    }

    return builder_to_string(*builder);
}

part_1 :: (input: string, $part2:=false) {

    inflow :: int.[500, 0];
    map : Map;

    for :trimmed input {
        words := split(it, " -> ");
        print("%\n", words);
        wall_points : [..][2]int;
        for w, wi: words {
            coords_str := split(w, ",");
            // print("coords_str = %\n", coords_str);
            wp := array_add(*wall_points);
            (<<wp)[0] = parse_int(*coords_str[0]);
            (<<wp)[1] = parse_int(*coords_str[1]);

            if wi == 0 then continue w;

            if wall_points[wi-1][0] == wall_points[wi][0] then
                make_wall_vertical(*map, 
                    x      = wall_points[wi][0], 
                    from_y = wall_points[wi-1][1], 
                    to_y   = wall_points[wi][1]
                );
            if wall_points[wi-1][1] == wall_points[wi][1] then
                make_wall_horizontal(*map, 
                    y      = wall_points[wi][1], 
                    from_x = wall_points[wi-1][0], 
                    to_x   = wall_points[wi][0]
                );
        }
        // print("%\n", wall_points);
    }


    max_y := 0;
    for map.columns if it.y_pos[it.y_pos.count-1] > max_y then max_y = it.y_pos[it.y_pos.count-1];
    max_y += 2;
    print("max_y = %\n", max_y);

    print("Map: \n%\n", map);
    print("Map: \n%\n", str(map));
    // set(*map,  inflow[0], inflow[1], .SAND);
    i := 0;
    while !simulate(*map, inflow[0], inflow[1], part2, max_y) {
        // print("iteration %\n", i);
        // print("Map: \n%\n", map);
        // print("Map: \n%\n", str(map));
        i += 1;

        // if i > 25 break;
    }

    print("Map: \n%\n", str(map));
    print("max units of sand: %\n", i);
}

test :: #string DONE
498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9
DONE

check :: #string DONE
457,150 -> 462,150
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
484,89 -> 484,92 -> 482,92 -> 482,100 -> 489,100 -> 489,92 -> 487,92 -> 487,89
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
451,161 -> 456,161
488,103 -> 488,107 -> 487,107 -> 487,111 -> 494,111 -> 494,107 -> 493,107 -> 493,103
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
473,40 -> 473,41 -> 491,41 -> 491,40
484,89 -> 484,92 -> 482,92 -> 482,100 -> 489,100 -> 489,92 -> 487,92 -> 487,89
458,161 -> 463,161
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
484,89 -> 484,92 -> 482,92 -> 482,100 -> 489,100 -> 489,92 -> 487,92 -> 487,89
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
461,57 -> 465,57
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
464,150 -> 469,150
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
473,40 -> 473,41 -> 491,41 -> 491,40
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
473,40 -> 473,41 -> 491,41 -> 491,40
470,136 -> 470,138 -> 464,138 -> 464,145 -> 480,145 -> 480,138 -> 474,138 -> 474,136
467,47 -> 471,47
488,103 -> 488,107 -> 487,107 -> 487,111 -> 494,111 -> 494,107 -> 493,107 -> 493,103
475,76 -> 475,80 -> 474,80 -> 474,86 -> 485,86 -> 485,80 -> 480,80 -> 480,76
470,50 -> 474,50
475,76 -> 475,80 -> 474,80 -> 474,86 -> 485,86 -> 485,80 -> 480,80 -> 480,76
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
464,55 -> 468,55
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
488,103 -> 488,107 -> 487,107 -> 487,111 -> 494,111 -> 494,107 -> 493,107 -> 493,103
455,57 -> 459,57
454,152 -> 459,152
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
454,158 -> 459,158
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
450,155 -> 455,155
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
476,50 -> 480,50
475,76 -> 475,80 -> 474,80 -> 474,86 -> 485,86 -> 485,80 -> 480,80 -> 480,76
464,50 -> 468,50
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
472,119 -> 472,120 -> 480,120 -> 480,119
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
475,76 -> 475,80 -> 474,80 -> 474,86 -> 485,86 -> 485,80 -> 480,80 -> 480,76
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
475,76 -> 475,80 -> 474,80 -> 474,86 -> 485,86 -> 485,80 -> 480,80 -> 480,76
470,44 -> 474,44
470,136 -> 470,138 -> 464,138 -> 464,145 -> 480,145 -> 480,138 -> 474,138 -> 474,136
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
478,115 -> 494,115 -> 494,114
470,136 -> 470,138 -> 464,138 -> 464,145 -> 480,145 -> 480,138 -> 474,138 -> 474,136
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
460,72 -> 460,73 -> 477,73 -> 477,72
484,89 -> 484,92 -> 482,92 -> 482,100 -> 489,100 -> 489,92 -> 487,92 -> 487,89
467,57 -> 471,57
460,148 -> 465,148
470,136 -> 470,138 -> 464,138 -> 464,145 -> 480,145 -> 480,138 -> 474,138 -> 474,136
475,76 -> 475,80 -> 474,80 -> 474,86 -> 485,86 -> 485,80 -> 480,80 -> 480,76
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
447,158 -> 452,158
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
461,53 -> 465,53
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
484,89 -> 484,92 -> 482,92 -> 482,100 -> 489,100 -> 489,92 -> 487,92 -> 487,89
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,89 -> 484,92 -> 482,92 -> 482,100 -> 489,100 -> 489,92 -> 487,92 -> 487,89
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
484,89 -> 484,92 -> 482,92 -> 482,100 -> 489,100 -> 489,92 -> 487,92 -> 487,89
478,115 -> 494,115 -> 494,114
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
460,72 -> 460,73 -> 477,73 -> 477,72
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
488,103 -> 488,107 -> 487,107 -> 487,111 -> 494,111 -> 494,107 -> 493,107 -> 493,103
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
470,136 -> 470,138 -> 464,138 -> 464,145 -> 480,145 -> 480,138 -> 474,138 -> 474,136
488,103 -> 488,107 -> 487,107 -> 487,111 -> 494,111 -> 494,107 -> 493,107 -> 493,103
461,152 -> 466,152
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
472,119 -> 472,120 -> 480,120 -> 480,119
444,161 -> 449,161
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
475,76 -> 475,80 -> 474,80 -> 474,86 -> 485,86 -> 485,80 -> 480,80 -> 480,76
472,119 -> 472,120 -> 480,120 -> 480,119
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
472,133 -> 472,123 -> 472,133 -> 474,133 -> 474,131 -> 474,133 -> 476,133 -> 476,132 -> 476,133 -> 478,133 -> 478,123 -> 478,133 -> 480,133 -> 480,130 -> 480,133 -> 482,133 -> 482,131 -> 482,133 -> 484,133 -> 484,132 -> 484,133 -> 486,133 -> 486,123 -> 486,133 -> 488,133 -> 488,125 -> 488,133
470,136 -> 470,138 -> 464,138 -> 464,145 -> 480,145 -> 480,138 -> 474,138 -> 474,136
488,103 -> 488,107 -> 487,107 -> 487,111 -> 494,111 -> 494,107 -> 493,107 -> 493,103
494,23 -> 494,22 -> 494,23 -> 496,23 -> 496,18 -> 496,23 -> 498,23 -> 498,15 -> 498,23 -> 500,23 -> 500,16 -> 500,23 -> 502,23 -> 502,14 -> 502,23 -> 504,23 -> 504,17 -> 504,23
469,70 -> 469,69 -> 469,70 -> 471,70 -> 471,68 -> 471,70 -> 473,70 -> 473,64 -> 473,70
470,136 -> 470,138 -> 464,138 -> 464,145 -> 480,145 -> 480,138 -> 474,138 -> 474,136
468,152 -> 473,152
473,47 -> 477,47
488,103 -> 488,107 -> 487,107 -> 487,111 -> 494,111 -> 494,107 -> 493,107 -> 493,103
458,55 -> 462,55
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
460,72 -> 460,73 -> 477,73 -> 477,72
484,36 -> 484,31 -> 484,36 -> 486,36 -> 486,31 -> 486,36 -> 488,36 -> 488,26 -> 488,36 -> 490,36 -> 490,26 -> 490,36 -> 492,36 -> 492,26 -> 492,36 -> 494,36 -> 494,26 -> 494,36 -> 496,36 -> 496,28 -> 496,36 -> 498,36 -> 498,33 -> 498,36 -> 500,36 -> 500,26 -> 500,36
DONE